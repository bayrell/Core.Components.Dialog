<!--
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Runtime.Web.Dialog.Dialog" extends="Runtime.Web.Component" 
	module="Runtime.Web.Dialog"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Button.Button" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Events.KeyDownEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />

<style>
%dialog_box, %dialog_shadow{
	position: fixed;
	top: 0; left: 0;
	width: 100%; height: 100%;
	z-index: 1001;
}
%dialog_box{
	overflow: auto;
	overflow-y: scroll;
	display: none;
}
%dialog_box.open{
	display: block;
}
%dialog_shadow{
	background-color: #000;
	opacity: 0.2;
	overflow: hidden;
}
%dialog_wrap{
	width: 100%;
	min-height: 100%;
}
%dialog_wrap > tr > td{
	padding: 20px;
}
%dialog{
	position: relative;
	padding: 20px;
	background-color: white;
	max-width: 350px;
	margin: 0 auto;
	width: auto;
	z-index: 1002;
	box-shadow: 2px 4px 10px 0px rgba(0,0,0,0.5)
}
%dialog_title, %dialog_message, %dialog_promt{
	padding-bottom: 12px;
}
%dialog_title{
	font-weight: bold;
}
%dialog_promt_input{
	padding: 6px 12px;
	width: 100%;
}
%dialog_buttons{
	padding-top: 12px;
	text-align: center;
}
%dialog_buttons %(Button)button{
	margin: 0 5px;
}
%dialog_row{
	padding-bottom: 6px;
}
%dialog_row:last-child{
	padding-bottom: 0px;
}
%dialog_result{
	text-align: center;
	padding-top: 12px;
}
%dialog_result.success{
	color: green;
}
%dialog_result.error{
	color: red;
}
</style>


<template name="render">
	<div class="dialog_box" class={ model.is_open ? 'open' : '' }>
		<div class='dialog_shadow'></div>
		<table class='dialog_wrap'><tr><td>
			<div class='dialog'>
				{ static::renderDialog(layout, model, params, content) }
			</div>
		</td></tr></table>
	</div>
</template>


<template name="renderDialog">
	%var bool show_buttons = (params != null) ? params.get("show_buttons", true) : true;
	{[
		static::renderTitle(layout, model, params, content),
		static::renderText(layout, model, params, content),
		static::renderPromt(layout, model, params, content),
		static::renderContent(layout, model, params, content),
		show_buttons ? static::renderButtons(layout, model, params, content) : "",
		static::renderResult(layout, model, params, content),
	]}
</template>


<template name="renderTitle">
	%if (model.title != "")
	{
		<div class='dialog_title'>{ model.title }</div>
	}
</template>


<template name="renderText">
	%if (model.text != "")
	{
		<div class='dialog_message'>{ model.text }</div>
	}
</template>


<template name="renderPromt">
	%var string style = (params != null) ? params.get("style", "") : "";
	%if (style == DialogModel::STYLE_PROMT)
	{
		<div class='dialog_promt'>
			<input 
				class='dialog_promt_input'
				@event:KeyDownEvent="onInputKeyDown"
				@bind="input"
			/>
		</div>
	}
</template>


<template name="renderContent">
	%var string style = (params != null) ? params.get("style", "") : "";
	%if (style == DialogModel::STYLE_CONTENT)
	{
		<div class='dialog_content'>
			{ content }
		</div>
	}
</template>


<template name="renderButtons">
	<div class='dialog_buttons'>
		<Button @tag='ok' @event:MouseClickEvent="onButtonClick">OK</Button>
		<Button @tag='cancel' @event:MouseClickEvent="onButtonClick">Cancel</Button>
	</div>
</template>


<template name="renderResult">
	%if (model.message != "" or model.success != "" or model.error == "")
	{
		<div class='dialog_result' class={ static::getResultClass(model) }>
			{ model.message }{ model.success }{ model.error }
		</div>
	}
</template>



<script type="frontend">


/**
 * Returns result class
 */
pure string getResultClass(DialogModel model)
{
	if (model.success != "") return "success";
	if (model.error != "") return "error";
	return "";
}



/**
 * Validate
 */
public bool validate()
{
	if (this.params.style == DialogModel::STYLE_PROMT)
	{
		if (this.model.input == "")
		{
			this.updateModel("setError", _("Runtime.Web.Dialog", "Type input"));
			return false;
		}
	}
	return true;
}



/**
 * Input keydown
 */
public async void onInputKeyDown(Message<KeyDownEvent> msg)
{
	KeyDownEvent e = msg.data;
	if (e.keyCode == 13)
	{
		this.updateModel("setInput", e.value);
		this.updateModel("setError", "");
		this.pressButton(DialogModel::BUTTON_RESULT_OK);
	}
}



/**
 * Button click
 */
public async void onButtonClick(Message<MouseClickEvent> msg)
{
	string tag = msg.data.target.params.get("@tag", "");
	await this.pressButton(tag);
}



/**
 * Press button
 * @param string value 
 */
public async void pressButton(string value)
{
	bool auto_hide = this.params.get("auto_hide", true);
	
	if (value == DialogModel::BUTTON_RESULT_OK)
	{
		bool is_valid = this.validate();
		if (not is_valid)
		{
			return;
		}
	}
	
	if (auto_hide) this.updateModel("hide");
	DialogModel model = this.model();
	
	await this.signal
	(
		new DialogEvent
		{
			"input": model.input,
			"model": model,
			"tag": model.tag,
			"button_result": value,
		}
	);
}

</script>

</class>