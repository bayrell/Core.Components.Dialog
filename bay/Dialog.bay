/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Runtime.Web.Dialog;

use Runtime.MessageRPC;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Annotations.Template;
use Runtime.Web.Events.Keyboard.KeyDownEvent;
use Runtime.Web.Events.Mouse.MouseClickEvent;
use Runtime.Web.Events.User.ChangeEvent;
use Runtime.Web.Button.Button;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;
use App.Model.IndexPageModel;


class Dialog extends Component
{
	
	public DialogModel model;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof DialogModel;
	
	
	
	/**
	 * Returns require components
	 */
	lambda Collection<string> components() => 
	[
		classof Button
	];
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%dialog_box, %dialog_shadow{
				position: fixed;
				top: 0; left: 0;
				width: 100%; height: 100%;
				z-index: 1001;
			}
			%dialog_box{
				overflow: auto;
				overflow-y: scroll;
				display: none;
			}
			%dialog_box.open{
				display: block;
			}
			%dialog_shadow{
				background-color: #000;
				opacity: 0.2;
				overflow: hidden;
			}
			%dialog_wrap{
				width: 100%;
				min-height: 100%;
			}
			%dialog_wrap > tr > td{
				padding: 20px;
			}
			%dialog{
				position: relative;
				padding: 20px;
				background-color: white;
				max-width: 350px;
				margin: 0 auto;
				width: auto;
				z-index: 1002;
				box-shadow: 2px 4px 10px 0px rgba(0,0,0,0.5)
			}
			%dialog_title, %dialog_message, %dialog_promt{
				padding-bottom: 12px;
			}
			%dialog_title{
				font-weight: bold;
			}
			%dialog_promt_input{
				padding: 6px 12px;
				width: 100%;
			}
			%dialog_buttons{
				padding-top: 12px;
				text-align: center;
			}
			%dialog_buttons %(Button)button{
				margin: 0 5px;
			}
			%dialog_row{
				padding-bottom: 6px;
			}
			%dialog_row:last-child{
				padding-bottom: 0px;
			}
			%dialog_error{
				color: red;
				text-align: center;
				padding-top: 12px;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	lambda html render
	(
		LayoutModel layout, DialogModel model, Dict params, html content
	)
	{
		string style = params.get("style", "");
		return 
			<div @class="dialog_box" class={ model.is_open ? 'open' : '' }>
				<div @class='dialog_shadow'></div>
				<table @class='dialog_wrap'><tr><td>
					<div @class='dialog'>
						{ static::renderDialog(layout, model, style, content) }
					</div>
				</td></tr></table>
			</div>
		;
	}
	
	
	
	/**
	 * Render dialog
	 */
	lambda html renderDialog(LayoutModel layout, DialogModel model, string style, html content)
		=> [
			static::renderTitle(layout, model, style),
			static::renderMessage(layout, model, style),
			static::renderPromt(layout, model, style),
			static::renderContent(layout, model, style, content),
			static::renderButtons(layout, model, style),
			static::renderError(layout, model, style),
		]
	;
	
	
	
	/**
	 * Render dialog title
	 */
	lambda html renderTitle(LayoutModel layout, DialogModel model, string style)
	{
		if (model.title == "") return "";
		return <div @class='dialog_title'>{ model.title }</div>;
	}
	
	
	
	/**
	 * Render dialog message
	 */
	lambda html renderMessage(LayoutModel layout, DialogModel model, string style)
	{
		if (model.message == "") return "";
		return <div @class='dialog_message'>{ model.message }</div>;
	}
	
	
	
	/**
	 * Render dialog promt
	 */
	lambda html renderPromt(LayoutModel layout, DialogModel model, string style)
	{
		if (style != DialogModel::STYLE_PROMT) return "";
		return <div @class='dialog_promt'>
			<input 
				@class='dialog_promt_input'
				@event:KeyDownEvent="onInputKeyDown"
				@bind="input"
			/>
		</div>;
	}
	
	
	
	/**
	 * Render dialog content
	 */
	lambda html renderContent(LayoutModel layout, DialogModel model, string style, html content)
	{
		if (style != DialogModel::STYLE_CONTENT) return "";
		return <div @class='dialog_content'>
			{ content }
		</div>;
	}
	
	
	
	/**
	 * Render dialog buttons
	 */
	lambda html renderButtons(LayoutModel layout, DialogModel model, string style)
	{
		return <div @class='dialog_buttons'>
			<Button @tag='ok' @event:MouseClickEvent="onButtonClick">OK</Button>
			<Button @tag='cancel' @event:MouseClickEvent="onButtonClick">Cancel</Button>
		</div>;
	}
	
	
	
	/**
	 * Render error
	 */
	lambda html renderError(LayoutModel layout, DialogModel model, string style)
	{
		if (model.error == "") return "";
		return <div @class='dialog_error'>{ model.error }</div>;
	}
	
	
	
	
	#ifdef FRONTEND then
	
	
	/* ---------------------------------- Events ----------------------------------- */
	
	/**
	 * Show dialog
	 */
	public void show(Dict params = null)
	{
		this.setModel( this.model.show(params) );
	}
	
	
	
	/**
	 * Hide dialog
	 */
	public void hide()
	{
		this.setModel( this.model.hide() );
	}
	
	
	
	/**
	 * Validate
	 */
	public bool validate()
	{
		if (this.model.style == DialogModel::STYLE_PROMT)
		{
			if (this.model.input == "")
			{
				this.setModel( this.model.setError( _("Type input") ) );
				return false;
			}
		}
		return true;
	}
	
	
	
	/**
	 * Input keydown
	 */
	public void onInputKeyDown(KeyDownEvent e)
	{
		if (e.keyCode == 13)
		{
			this.setModel( this.model.setInput(e.value).setError() );
			this.pressButton(DialogModel::BUTTON_RESULT_OK);
		}
	}
	
	
	
	/**
	 * Button click
	 */
	public void onButtonClick(MouseClickEvent e)
	{
		string tag = e.target.params.get("@tag", "");
		this.pressButton(tag);
	}
	
	
	
	/**
	 * Press button
	 * @param string value 
	 */
	public void pressButton(string value)
	{
		if (value == DialogModel::BUTTON_RESULT_OK)
		{
			bool is_valid = this.validate();
			if (not is_valid)
			{
				return;
			}
		}
		
		DialogModel old_model = this.model;
		this.setModel( this.model.hide(value) );
		
		this.signalOut
		(
			new DialogEvent
			{
				"input": old_model.input,
				"model": old_model,
				"tag": old_model.tag,
				"button_result": value,
			}
		);
	}
	
	
	#endif
	
}
